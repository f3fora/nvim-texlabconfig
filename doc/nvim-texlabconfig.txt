*nvim-texlabconfig.txt*       For Neovim 0.7.0       Last change: 2022 June 25

==============================================================================
Table of Contents                        *nvim-texlabconfig-table-of-contents*

1. nvim-texlabconfig                     |nvim-texlabconfig-nvim-texlabconfig|
  - Requirements                              |nvim-texlabconfig-requirements|
  - Installation                              |nvim-texlabconfig-installation|
  - Configuration                            |nvim-texlabconfig-configuration|
  - Executable: `nvim-texlabconfig`|nvim-texlabconfig-executable:-`nvim-texlabconfig`|
  - Status                                          |nvim-texlabconfig-status|
  - Previewing                                  |nvim-texlabconfig-previewing|

==============================================================================
1. nvim-texlabconfig                     *nvim-texlabconfig-nvim-texlabconfig*

**Texlab** is a popular Language Server for LaTeX, which supports **Forward
Search** and **Inverse Search** between TeX and PDF files.

**nvim-texlabconfig** provides some useful snippets to configure this
capability for **neovim** and some viewers and a homonymous executable which
allows a fast **Inverse Search**.

REQUIREMENTS                                  *nvim-texlabconfig-requirements*


- nvim <https://github.com/neovim/neovim> 0.7+
- TexLab <https://github.com/latex-lsp/texlab>
- nvim-lspconfig <https://github.com/neovim/nvim-lspconfig>
- go <https://go.dev/>


Tag `v0.1.0` does not depend on `go` for building purpose and does not require
an additional executable.

INSTALLATION                                  *nvim-texlabconfig-installation*

**nvim-texlabconfig** can be installed for example with Packer
<https://github.com/wbthomason/packer.nvim>.

>
    use({
        'f3fora/nvim-texlabconfig',
        config = function()
            require('texlabconfig').setup(config)
        end,
        -- ft = { 'tex', 'bib' }, -- for lazy loading
        run = 'go build'
        -- run = 'go build -o ~/.bin/' if e.g. ~/.bin/ is in $PATH
    })
<


The executable `nvim-texlabconfig` has to be also build, e.g., with `go build`.
By default, the result can be found in `:lua
=require('texlabconfig').project_dir()` directory. However, the output location
can be chosen with `-o` flag. From `go help build`:


  The -o flag forces build to write the resulting executable or object to the
  named output file or directory, instead of the default behavior described in
  the last two paragraphs. If the named output is an existing directory or ends
  with a slash or backslash, then any resulting executables will be written to
  that directory.`


CONFIGURATION                                *nvim-texlabconfig-configuration*

**nvim-texlabconfig** is configured using the `setup` function. The argument is
a table and is optional. The default values are listed below.

>
    local config = {
        cache_activate = true,
        cache_filetypes = { 'tex', 'bib' },
        cache_root = vim.fn.stdpath('cache'),
        reverse_search_edit_cmd = 'edit',
        file_permission_mode = 438,
    }
<


`CACHE_ACTIVATE` ~

Do not change this option.

Type: boolean Default: `true`

`CACHE_FILETYPES` ~

Activate cache for buffers with these file types.

Type: list of strings Default: `{ 'tex', 'bib' }`

`CACHE_ROOT` ~

Specify the cache directory. **nvim-texlabconfig** creates a
`nvim-texlabconfig.json` file in this directory.

Type: string Default: `vim.fn.stdpath('cache')`

`REVERSE_SEARCH_EDIT_CMD` ~

When working in a multi-file project, initiating inverse search may require
opening a file that is not currently open in a window. This option controls the
command that is used to open files as a result of an inverse search.

Type: string Default: `'edit'` Examples:


- `'edit'` open buffer in current window
- `'tabedit'` open buffer in new tab page
- `'split'` split current window to open buffer


`FILE_PERMISSION_MODE` ~

See luv-file-system-operations
<https://github.com/luvit/luv/blob/master/docs.md#file-system-operations=>.

Type: integer Default: `438`

EXECUTABLE: `NVIM-TEXLABCONFIG`*nvim-texlabconfig-executable:-`nvim-texlabconfig`*

`nvim-texlabconfig` is a convenient executable which simplifies the viewer
configuration. It handles multiple neovim instances and choose the correct one.

Assuming `nvim-texlabconfig` is placed in a `$PATH` directory and `cache_root`
is the default one, the following command can be used, where `%f` is the
absolute filename and `%l` is the line number.

>
    nvim-texlabconfig -file '%f' -line %l
<


Otherwise, if `nvim-texlabconfig` is not in `$PATH`, e.g. it is placed in
`:lua =require('texlabconfig').project_dir()`,

>
    /path/to/nvim-texlabconfig -file '%f' -line %l
<


If a different |nvim-texlabconfig-`cache_root`| is used, the directory used has
to be specified after `-cache_root` optional flag.

>
    nvim-texlabconfig -file '%f' -line %l -cache_root /path/to/cache_root/
<


From `nvim-texlabconfig -help`:


  Usage of nvim-texlabconfig: -cache_root string Path to nvim-texlabconfig.json
  file (default "/home/user/.cache/nvim") -file string Absolute filename
  [REQUIRED] -line int Line number [REQUIRED]


STATUS                                              *nvim-texlabconfig-status*

Help wanted to add and test other viewers, which are present in Texlab
Previewing Documentation
<https://github.com/latex-lsp/texlab/blob/master/docs/previewing.md>.

PREVIEWING                                      *nvim-texlabconfig-previewing*

To configure Forward and Inverse Search, the default configuration of `texlab`
defined in nvim-lspconfig
<https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#texlab>
has to be changed.

Different values of `executable` and `args` are required for each viewer.

>
    local lspconfig = require('lspconfig')
    local executable
    local args
    
    lspconfig.texlab.setup({
        setting = {
            texlab = {
                forwardSearch = {
                    executable = executable,
                    args = args,
                },
            },
        },
    })
<


In the following sections, some configurations are reported.

SKIM ~

>
    local executable = '/Applications/Skim.app/Contents/SharedSupport/displayline'
    local args = {"%l", "%p", "%f"}
<


In the Skim preferences (Skim → Preferences → Sync → PDF-TeX Sync
support)

>
    Preset: Custom
    Command: nvim-texlabconfig
    Arguments: -file '%file' -line %line
<


ZATHURA ~

>
    local executable = 'zathura'
    local args = {
        '--synctex-editor-command',
        [[nvim-texlabconfig -file '%{input}' -line %{line}]],
        '--synctex-forward',
        '%l:1:%f',
        '%p',
    }
<


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
